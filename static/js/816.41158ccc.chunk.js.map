{"version":3,"file":"static/js/816.41158ccc.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/contacts/selectors.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactForm_wrapper__-Umw-\",\"addButton\":\"ContactForm_addButton__zGNsx\"};","import React from 'react';\nimport styles from './ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const handleContact = e => {\n    e.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: e.target.elements.name.value,\n      number: e.target.elements.phone.value,\n    };\n    dispatch(addContact(newContact));\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleContact} className={styles.wrapper}>\n      <h3>Name</h3>\n      <input\n        type=\"text\"\n        name=\"name\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <h3>Number</h3>\n      <input\n        type=\"tel\"\n        name=\"phone\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\" className={styles.addButton}>\n        Add\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { createSelector } from 'reselect';\n\nexport const selectContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, getFilter],\n  (contacts, filterQuery) => {\n    return contacts.filter(\n      contact =>\n        filterQuery === '' ||\n        contact.name.toLowerCase().includes(filterQuery.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from '../../redux/filter/filterSlice';\nimport { getFilter } from '../../redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const showFilteredContacts = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <div>\n      <label>\n        <input\n          type=\"text\"\n          placeholder=\"Find contacts by name...\"\n          value={filter}\n          onChange={showFilteredContacts}\n        />\n      </label>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapperItem\":\"ContactListItem_wrapperItem__H+rr-\",\"deleteButton\":\"ContactListItem_deleteButton__b1Nqt\"};","import React from 'react';\nimport styles from './ContactListItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport propTypes from 'prop-types';\nconst ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <li key={id} className={styles.wrapperItem}>\n      {name}: {number}\n      <button\n        className={styles.deleteButton}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  name: propTypes.string.isRequired,\n  number: propTypes.string.isRequired,\n  id: propTypes.string,\n};\n\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapperList\":\"ContactList_wrapperList__ISRUi\"};","import React from 'react';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport styles from './ContactList.module.css';\nimport { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport propTypes from 'prop-types';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ul className={styles.wrapperList}>\n      {contacts.map(contact => (\n        <ContactListItem\n          key={nanoid()}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  list: propTypes.arrayOf(\n    propTypes.shape({\n      key: propTypes.string,\n      name: propTypes.string.isRequired,\n      number: propTypes.string.isRequired,\n      deleteContact: propTypes.func,\n    })\n  ),\n};\nexport default ContactList;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport { getError, getIsLoading } from '../redux/contacts/selectors';\nimport ContactList from 'components/ContactList/ContactList';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <ClipLoader />}\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["dispatch","useDispatch","_jsxs","onSubmit","e","preventDefault","newContact","id","nanoid","name","target","elements","value","number","phone","addContact","reset","className","styles","children","_jsx","type","title","required","getFilter","state","filter","getIsLoading","contacts","isLoading","getError","error","selectFilteredContacts","createSelector","items","filterQuery","contact","toLowerCase","includes","Filter","useSelector","placeholder","onChange","filterContacts","_ref","onClick","deleteContact","map","ContactListItem","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Contacts","useEffect","fetchContacts","style","display","justifyContent","alignItems","flexDirection","ContactForm","ClipLoader","ContactList"],"sourceRoot":""}